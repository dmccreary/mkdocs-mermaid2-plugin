{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Mermaid Drawing Test Simple Left to Right flowchart using \"LR\" This is a simple example to show you how to get started with the Mermaid drawing extension to mkdocs. Within your Markdown (.md) file you will place three backslash characters followed by the mermaid keyword on the first line. The start and end of the code blocks are omitted from these examples. graph LR Start --> Stop graph LR Start --> Stop With Labels and Node IDs Here is this same left-to-right workflow with a vertex ID and a label using the ID[MyLabel] syntax. graph LR A[Start] --> B[Stop] graph LR A[Start] --> B[Stop] graph TD A[Client] --> B[Load Balancer] B --> C[Server01] B --> D[Server02]","title":"Mermaid Drawing Test"},{"location":"#mermaid-drawing-test","text":"","title":"Mermaid Drawing Test"},{"location":"#simple-left-to-right-flowchart-using-lr","text":"This is a simple example to show you how to get started with the Mermaid drawing extension to mkdocs. Within your Markdown (.md) file you will place three backslash characters followed by the mermaid keyword on the first line. The start and end of the code blocks are omitted from these examples. graph LR Start --> Stop graph LR Start --> Stop","title":"Simple Left to Right flowchart using \"LR\""},{"location":"#with-labels-and-node-ids","text":"Here is this same left-to-right workflow with a vertex ID and a label using the ID[MyLabel] syntax. graph LR A[Start] --> B[Stop] graph LR A[Start] --> B[Stop] graph TD A[Client] --> B[Load Balancer] B --> C[Server01] B --> D[Server02]","title":"With Labels and Node IDs"},{"location":"awareness-levels/","text":"Awareness Levels Unconscious Incompetence Conscious Incompetence Conscious Competence Unconscious Competence Flow Diagram graph LR id1([Unconscious Incompetence]) -- Awareness --> id2([Conscious Incompetence]) -- Skill Building --> id3([Conscious Competence]) -- Mastery --> id4([Unconscious Competence])","title":"Awareness Levels"},{"location":"awareness-levels/#awareness-levels","text":"Unconscious Incompetence Conscious Incompetence Conscious Competence Unconscious Competence","title":"Awareness Levels"},{"location":"awareness-levels/#flow-diagram","text":"graph LR id1([Unconscious Incompetence]) -- Awareness --> id2([Conscious Incompetence]) -- Skill Building --> id3([Conscious Competence]) -- Mastery --> id4([Unconscious Competence])","title":"Flow Diagram"},{"location":"graph-basics/","text":"Graph Basics We will generate the basic elements of a labeled property graph: Round circles for verticies Labeled edges We will use the following conventions: Vertices use UpperCamelCase Edge labels use UPPER_CASE_WITH_UNDERSCORES Our graphs will use a Left-to-Right orientation. Other layout options you can use are: LR for Left-to-Right orientation TD for Top-Down orientation TB - top to bottom TD - top-down/ same as top to bottom BT - bottom to top RL - right to left Each of our drawings begin with the keyword graph and the automatic layout algorithm. So for graphs with Left-to-Right layouts we start our drawing with: graph LR Vertex Circles There are many shapes you can make a node in a graph. For our high-level graph data models we will stick to circles which we indicate by surrounding a Vertex Label with double parenthesis ((`` and ))```. graph LR id1((Provider)) id2((Patient) graph LR id1((Provider)) id2((Patient)) Labeled Directed Edges Now let's add a directed edge with a label on it between the two vertices. We will do this by adding one addition line between the two vertex statements. The line must start with a double dash and end with a dash-dash-greater-than character like this: Here is the labeled directed edge line: -- HAS_PATIENT --> The Mermaid documentation calls this text-on-link graph LR id1((Provider)) -- HAS_PATIENT --> id2((Patient)) graph LR id1((Provider)) -- HAS_PATIENT --> id2((Patient)) You can also remove the greater than > in the link to make the link an undirected edge. There are other link options you can use such as a dotted link. graph LR id1((Patient)) -. HAS_TENTATIVE_DIAGNOSIS .-> id2((Condition)) graph LR id1((Patient)) == HAS_CONFIRMED_DIAGNOSIS ==> id2((Condition))","title":"Graph Basics"},{"location":"graph-basics/#graph-basics","text":"We will generate the basic elements of a labeled property graph: Round circles for verticies Labeled edges We will use the following conventions: Vertices use UpperCamelCase Edge labels use UPPER_CASE_WITH_UNDERSCORES Our graphs will use a Left-to-Right orientation. Other layout options you can use are: LR for Left-to-Right orientation TD for Top-Down orientation TB - top to bottom TD - top-down/ same as top to bottom BT - bottom to top RL - right to left Each of our drawings begin with the keyword graph and the automatic layout algorithm. So for graphs with Left-to-Right layouts we start our drawing with: graph LR","title":"Graph Basics"},{"location":"graph-basics/#vertex-circles","text":"There are many shapes you can make a node in a graph. For our high-level graph data models we will stick to circles which we indicate by surrounding a Vertex Label with double parenthesis ((`` and ))```. graph LR id1((Provider)) id2((Patient) graph LR id1((Provider)) id2((Patient))","title":"Vertex Circles"},{"location":"graph-basics/#labeled-directed-edges","text":"Now let's add a directed edge with a label on it between the two vertices. We will do this by adding one addition line between the two vertex statements. The line must start with a double dash and end with a dash-dash-greater-than character like this: Here is the labeled directed edge line: -- HAS_PATIENT --> The Mermaid documentation calls this text-on-link graph LR id1((Provider)) -- HAS_PATIENT --> id2((Patient)) graph LR id1((Provider)) -- HAS_PATIENT --> id2((Patient)) You can also remove the greater than > in the link to make the link an undirected edge. There are other link options you can use such as a dotted link. graph LR id1((Patient)) -. HAS_TENTATIVE_DIAGNOSIS .-> id2((Condition)) graph LR id1((Patient)) == HAS_CONFIRMED_DIAGNOSIS ==> id2((Condition))","title":"Labeled Directed Edges"},{"location":"installation/","text":"Installing the Mermaid2 Plugin Pip install method pip3 install mkdocs-mermaid2-plugin Successfully Installed Message Installing collected packages: urllib3, soupsieve, idna, editorconfig, chardet, requests, jsbeautifier, beautifulsoup4, mkdocs-mermaid2-plugin Successfully installed beautifulsoup4-4.9.3 chardet-4.0.0 editorconfig-0.12.3 idna-2.10 jsbeautifier-1.13.5 mkdocs-mermaid2-plugin-0.5.1 requests-2.25.1 soupsieve-2.2 urllib3-1.26.3 Successful build messages $ mkdocs serve INFO - Building documentation... INFO - MERMAID2 - Initialization arguments: {} INFO - MERMAID2 - Using javascript library (8.8.0): https://unpkg.com/mermaid@8.8.0/dist/mermaid.min.js Common Errors $ mkdocs serve INFO - Building documentation... ERROR - Config value: 'plugins'. Error: The \"mermaid2\" plugin is not installed The python mkdocs system could not find the mermaid2 plugin. Check you conda environment.","title":"Installing the Mermaid2 Plugin"},{"location":"installation/#installing-the-mermaid2-plugin","text":"","title":"Installing the Mermaid2 Plugin"},{"location":"installation/#pip-install-method","text":"pip3 install mkdocs-mermaid2-plugin","title":"Pip install method"},{"location":"installation/#successfully-installed-message","text":"Installing collected packages: urllib3, soupsieve, idna, editorconfig, chardet, requests, jsbeautifier, beautifulsoup4, mkdocs-mermaid2-plugin Successfully installed beautifulsoup4-4.9.3 chardet-4.0.0 editorconfig-0.12.3 idna-2.10 jsbeautifier-1.13.5 mkdocs-mermaid2-plugin-0.5.1 requests-2.25.1 soupsieve-2.2 urllib3-1.26.3","title":"Successfully Installed Message"},{"location":"installation/#successful-build-messages","text":"$ mkdocs serve INFO - Building documentation... INFO - MERMAID2 - Initialization arguments: {} INFO - MERMAID2 - Using javascript library (8.8.0): https://unpkg.com/mermaid@8.8.0/dist/mermaid.min.js","title":"Successful build messages"},{"location":"installation/#common-errors","text":"$ mkdocs serve INFO - Building documentation... ERROR - Config value: 'plugins'. Error: The \"mermaid2\" plugin is not installed The python mkdocs system could not find the mermaid2 plugin. Check you conda environment.","title":"Common Errors"},{"location":"subgraphs/","text":"Subgraphs You can partition complex graphs into subgraphs. For example here are three separate subgraphs from the healthcare domain. graph TD subgraph Financial id1((Provider)) id2((Claim)) id3((Patient)) end subgraph Clinical id4((Patient)) id5((Diagnosis)) id6((Condition)) end subgraph Insurance id7((Company)) id8((Plan)) id9((Enrollment)) id10((Member)) end Here is the code to render this graph: graph TD subgraph Financial id1((Provider)) id2((Claim)) id3((Patient)) end subgraph Clinical id4((Patient)) id5((Diagnosis)) id6((Condition)) end subgraph Insurance id7((Company)) id8((Plan)) id9((Enrollment)) id10((Member)) end graph RL subgraph financial id1((Provider)) -- SUBMITS --> id2((Claim)) -- FOR_SERVICES_ON --> id3((Patient)) end subgraph clinical id3((Patient)) -- HAS_CONDITION --> id4((Condition)) end","title":"Subgraphs"},{"location":"subgraphs/#subgraphs","text":"You can partition complex graphs into subgraphs. For example here are three separate subgraphs from the healthcare domain. graph TD subgraph Financial id1((Provider)) id2((Claim)) id3((Patient)) end subgraph Clinical id4((Patient)) id5((Diagnosis)) id6((Condition)) end subgraph Insurance id7((Company)) id8((Plan)) id9((Enrollment)) id10((Member)) end Here is the code to render this graph: graph TD subgraph Financial id1((Provider)) id2((Claim)) id3((Patient)) end subgraph Clinical id4((Patient)) id5((Diagnosis)) id6((Condition)) end subgraph Insurance id7((Company)) id8((Plan)) id9((Enrollment)) id10((Member)) end graph RL subgraph financial id1((Provider)) -- SUBMITS --> id2((Claim)) -- FOR_SERVICES_ON --> id3((Patient)) end subgraph clinical id3((Patient)) -- HAS_CONDITION --> id4((Condition)) end","title":"Subgraphs"}]}